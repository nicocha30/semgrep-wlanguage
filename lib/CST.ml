(* Generated by ocaml-tree-sitter. *)
(*
   wlanguage grammar

   entrypoint: program
*)

open! Sexplib.Conv
open Tree_sitter_run

type line_comment = Token.t

type boolean = [
    `VRAI of Token.t (* "VRAI" *)
  | `FAUX of Token.t (* "FAUX" *)
]

type number = Token.t

type identifier = Token.t (* pattern [a-zA-Z_][a-zA-Z0-9_éèà]* *)

type string_ = Token.t (* pattern "\"([^\"\\\\]|\\\\.)*\"" *)

type block_comment = Token.t

type type_ = [
    `Entier of Token.t (* "entier" *)
  | `RUNK of Token.t (* "r\195\169el" *)
  | `Chaine of Token.t (* "chaine" *)
  | `MonU of Token.t (* "mon\195\169taire" *)
  | `Bool of Token.t (* "bool\195\169en" *)
  | `Date of Token.t (* "date" *)
  | `Heure of Token.t (* "heure" *)
  | `DurU of Token.t (* "dur\195\169e" *)
  | `Id of identifier (*tok*)
]

type identifier_chain = (
    identifier (*tok*)
  * (Token.t (* "." *) * identifier (*tok*)) list (* zero or more *)
)

type comment = [
    `Line_comm of line_comment (*tok*)
  | `Blk_comm of block_comment (*tok*)
]

type argument_list = (
    expression
  * (Token.t (* "," *) * expression) list (* zero or more *)
)

and expression = [
    `Num of number (*tok*)
  | `Str of string_ (*tok*)
  | `Bool of boolean
  | `Id_chain of identifier_chain
  | `Bin_exp of (
        expression
      * [
            `PLUS of Token.t (* "+" *)
          | `DASH of Token.t (* "-" *)
          | `STAR of Token.t (* "*" *)
          | `SLASH of Token.t (* "/" *)
          | `EQ of Token.t (* "=" *)
          | `LTGT of Token.t (* "<>" *)
          | `GT of Token.t (* ">" *)
          | `LT of Token.t (* "<" *)
          | `GTEQ of Token.t (* ">=" *)
          | `LTEQ of Token.t (* "<=" *)
        ]
      * expression
    )
  | `Func_call of (
        identifier_chain
      * Token.t (* "(" *)
      * argument_list option
      * Token.t (* ")" *)
    )
]

type assignment = (
    identifier_chain
  * Token.t (* "=" *)
  * expression
  * Token.t (* ";" *) option
)

type else_clause = (Token.t (* "SINON" *) * program)

and program =
  [ `Stmt of statement | `Comm of comment ] list (* zero or more *)

and statement = [
    `Var_decl of (
        identifier (*tok*)
      * [
            `EstS_012163e of Token.t (* "est une" *)
          | `EstS_d45e481 of Token.t (* "est un" *)
          | `Est of Token.t (* "est" *)
        ]
      * type_
      * (Token.t (* "=" *) * expression) option
      * Token.t (* ";" *) option
    )
  | `Assign of assignment
  | `If_stmt of (
        Token.t (* "SI" *)
      * expression
      * Token.t (* "ALORS" *)
      * program
      * else_clause option
      * Token.t (* "FIN" *)
    )
  | `For_stmt of (
        Token.t (* "POUR" *) * assignment * Token.t (* "TANTQUE" *)
      * expression * program * Token.t (* "FIN" *)
    )
  | `While_stmt of (
        Token.t (* "TANTQUE" *) * expression * program * Token.t (* "FIN" *)
    )
  | `Exp of expression
]

type binary_expression (* inlined *) = (
    expression
  * [
        `PLUS of Token.t (* "+" *)
      | `DASH of Token.t (* "-" *)
      | `STAR of Token.t (* "*" *)
      | `SLASH of Token.t (* "/" *)
      | `EQ of Token.t (* "=" *)
      | `LTGT of Token.t (* "<>" *)
      | `GT of Token.t (* ">" *)
      | `LT of Token.t (* "<" *)
      | `GTEQ of Token.t (* ">=" *)
      | `LTEQ of Token.t (* "<=" *)
    ]
  * expression
)

type function_call (* inlined *) = (
    identifier_chain
  * Token.t (* "(" *)
  * argument_list option
  * Token.t (* ")" *)
)

type variable_declaration (* inlined *) = (
    identifier (*tok*)
  * [
        `EstS_012163e of Token.t (* "est une" *)
      | `EstS_d45e481 of Token.t (* "est un" *)
      | `Est of Token.t (* "est" *)
    ]
  * type_
  * (Token.t (* "=" *) * expression) option
  * Token.t (* ";" *) option
)

type for_statement (* inlined *) = (
    Token.t (* "POUR" *) * assignment * Token.t (* "TANTQUE" *) * expression
  * program * Token.t (* "FIN" *)
)

type if_statement (* inlined *) = (
    Token.t (* "SI" *)
  * expression
  * Token.t (* "ALORS" *)
  * program
  * else_clause option
  * Token.t (* "FIN" *)
)

type while_statement (* inlined *) = (
    Token.t (* "TANTQUE" *) * expression * program * Token.t (* "FIN" *)
)

type extra

type extras = extra list
